plugins {
    id 'java'
    id 'jacoco' // code coverage
}

repositories {
    maven {
        url "https://www.hec.usace.army.mil/nexus/repository/maven-public/"
    }
    mavenCentral()
}

test {
    useJUnitPlatform()
    exclude '**/performance/**'
    jvmArgs = ["-Djava.io.tmpdir=c:/temp"]
    finalizedBy jacocoTestReport
    
}

build {finalizedBy javadoc }


task runApp(type: JavaExec) {
    main = 'hec.ensemble.EnsembleUtility'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-Djava.io.tmpdir=c:/temp"]
    args = ["c:/temp/hefs_cache", "30","1","src/test/resources/database/ResSim.db"]
}

task runEnsembleMetrics(type: JavaExec) {
    main = 'hec.ensemble.EnsembleUtility'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-Djava.io.tmpdir=c:/temp"]
    args = ["c:/temp/hefs_cache", "100","10","C:/temp/ResSim.db"]
}

jacocoTestReport {
    reports{
        xml.enabled true
    }
}

dependencies {
    runtimeOnly 'org.xerial:sqlite-jdbc:3.30.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.0'
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.4.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.4.0"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.4.0"   
    
}

task perfTest(type: Test){
    useJUnitPlatform()
    exclude "hec/**"
    include "performance/**"
    outputs.upToDateWhen {false}

    jvmArgs += ["-Xms2048M","-Xmx2048m","-XX:+UnlockCommercialFeatures", "-XX:+FlightRecorder"]

    def jfrOptions = [
              defaultrecording: true,
              dumponexit      : true,
              dumponexitpath  : "${project.buildDir}/dumponexit.jfr",
              globalbuffersize: '10M',
              disk            : true,
              settings        : "${System.getProperty("java.home")}/lib/jfr/profile.jfc".toString()        
    ]

    jvmArgs += ["-XX:FlightRecorderOptions=${jfrOptions.collect { k, v -> "$k=$v".toString() }.join(',')}"]
    mustRunAfter test
}
