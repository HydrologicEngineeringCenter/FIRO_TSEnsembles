buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.12.0-rc2"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "com.palantir.git-version" version "3.0.0"
}
dependencies {
    implementation project(":FIRO_TSEnsembles");
}
configurations {
    windows_x64
    linux_x64
}

group 'hec.dss.ensemble'

repositories {
    mavenCentral()
    maven {
        url = 'https://www.hec.usace.army.mil/nexus/repository/maven-public'
    }
}
dependencies {
    implementation project(":FIRO_TSEnsembles")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    implementation ('mil.army.usace.hec:hec-monolith:3.3.23'){
        exclude group: "codebase", module: "*"
        exclude group: "com.sun.media", module: "*"
        exclude group: "javax.media", module: "*"
    }
}

test {
    useJUnitPlatform()
    jvmArgs = ["-Djava.library.path=${buildDir}/x64"]
}
dependencies {
    windows_x64 'mil.army.usace.hec:javaHeclib:7-IO-RC1-win-x86_64@zip'
    linux_x64 'mil.army.usace.hec:javaHeclib:7-IO-RC1-linux-x86_64@zip'
}

task copyNatives(type: Copy){
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        configurations.windows_x64.asFileTree.each {
            from(zipTree(it))
            into "$buildDir/x64"
        }
    }
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        configurations.linux_x64.asFileTree.each {
            from(zipTree(it))
            into "$buildDir/x64"
        }
    }
}
jar {
    dependsOn copyNatives
}

task showGit () {
    doFirst {
        def gitInfo = versionDetails()
        println( "Used:    " + getVersion() ) // The select version (the project.version field)
        println( "Tag:     " + gitInfo.lastTag) // actual tag or commit hash(short) if no tag
        println( "Hash:    " + gitInfo.gitHash) // short commit hash
        println( "Branch:  " + gitInfo.branchName) // branch name (null if tag checkout)
        println( "TagBuild:" + gitInfo.isCleanTag) // true if repoi is in dettached head mode(e.g. git checkout <tag>)
    }
}

def versionLabel(gitInfo) {
    def branch = gitInfo.branchName // all branches are snapshots, only tags get released
    def verNum = "-SNAPSHOT"
    def tag = gitInfo.lastTag
    println(tag)
    if (tag.contains("dss-")) {
        def tagArray = tag.trim().split('-')
        verNum = tagArray[1]
    }
    return branch == null ? verNum : branch + verNum
}


publishing {
    version = versionLabel(versionDetails())
    println("selected tag: " + version)
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = 'mil.army.usace.hec'
            artifactId = 'dss-ensembles'
        }
    }
    repositories {
        maven {
            name = "hecNexus"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
            def releasesRepoUrl = "https://www.hec.usace.army.mil/nexus/repository/maven-releases/"
            def snapshotsRepoUrl = "https://www.hec.usace.army.mil/nexus/repository/maven-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

publish.dependsOn(build)

build {
    dependsOn jar
}
